void wifiInit(void){

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();
  
}
void firebaseInitWithSignup(void){
  /* Assign the api key (required) */
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  /* Sign up */
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  /* Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h
  
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

}
void setup() {
  Serial.begin(115200);
  while (!Serial) ;                                 // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  // put your setup code here, to run once:
  wifiInit();                                         //establish wifi network
  firebaseInitWithSignup();                         //firebase Intitalize for read and write
  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN);
  rfidReader1.PCD_Init(CS_1, RST_PIN);                 // Init rfidReader1
  rfidReader2.PCD_Init(CS_2, RST_PIN);                 // Init rfidReader2
  rfidReader3.PCD_Init(CS_3, RST_PIN);                 // Init rfidReader2
                                       //establish wifi network
  Serial.println("RFID reader 1");
  rfidReader1.PCD_DumpVersionToSerial();  // Show details of PCD - MFRC522 Card Reader details
  Serial.println("RFID reader 2");
  rfidReader2.PCD_DumpVersionToSerial();  // Show details of PCD - MFRC522 Card Reader details
  Serial.println("RFID reader 3");
  rfidReader3.PCD_DumpVersionToSerial();  // Show details of PCD - MFRC522 Card Reader details  
  Serial.println("");
  Serial.println("");
                        
  
  // Print to monitor
  Serial.println("PCA9685 Servo Test");
 
  // Initialize PCA9685
  pca9685.begin();

  // Set PWM Frequency to 50Hz
  pca9685.setPWMFreq(50);
  
}
void readUIDRFID(MFRC522 rfidReader){
  /*Show UID for Card/Tag on serial monitor*/
  Serial.print("UID tag :");
  String scannedID= "";
  byte letter;
  for (byte i = 0; i < rfidReader.uid.size; i++)
  {
     Serial.print(rfidReader.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(rfidReader.uid.uidByte[i], HEX);
     scannedID.concat(String(rfidReader.uid.uidByte[i] < 0x10 ? " 0" : " "));
     scannedID.concat(String(rfidReader.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("StudentID : ");
  scannedID.toUpperCase();

  if (Firebase.ready() && signupOK ){
      bool checkFlag=scanReqCheckFirebase(scannedID); 
      if(checkFlag==true){
        Serial.println("Sent scannedID to Firebase to write");
        setCurrentScanID(scannedID);
      }
  }

}
//sequence
// start from the loop where it check everytime it gets a card
// it will 
void loop() {
  // put your main code here, to run repeatedly:
  /*Look for the RFID Card*/
  if ( ! rfidReader3.PICC_IsNewCardPresent())
  {
    return;
  }
  /*Select Card*/
  if ( ! rfidReader3.PICC_ReadCardSerial())
  {
    return;
  }
  readUIDRFID(rfidReader3); 
}



void setCurrentScanIDOpenDoor(String scannedID){
    // Write an Float number on the database path test/float
    if (Firebase.RTDB.setString(&firebaseDataRoot, "currentScanID/",scannedID)){
      Serial.println("Scan ID PASSED");
      Serial.println("PATH: " + firebaseDataRoot.dataPath());
      Serial.println("TYPE: " + firebaseDataRoot.dataType());

      if(Firebase.RTDB.setBool(&firebaseDataRoot, "scanProcessed/",true)){
        Serial.println("scanProcessed & scanReq PASSED");
        Serial.println("PATH: " + firebaseDataRoot.dataPath());
        Serial.println("TYPE: " + firebaseDataRoot.dataType());

        if (Firebase.RTDB.getInt(&firebaseDataRoot, "doorOpenReq")) {
          
          Firebase.RTDB.getInt(&firebaseDataRoot, "doorOpenReq");
          int doorNo=firebaseDataRoot.to<int>();
          Serial.println("Fetched DoorOpenReq : ");
          Serial.println(doorNo);
          
            if(doorNo!=-1){
              Serial.println("DoorOpenReq: ");
              Serial.println(doorNo);
              switch (doorNo) {
                case 0:
                  //opening door
                  rotateForward(0,pwm0);  
                  delay(3000); 
                  while(true){                    
                      if (!rfidReader1.PICC_IsNewCardPresent())
                      {
                        return;
                      }
                      /*Select Card*/
                      if (!rfidReader1.PICC_ReadCardSerial())
                      {
                        return;
                      }
                      //closing door
                      readEquipmentID(rfidReader1);
                      break;
                  }
                  rotateBackward(0,pwm0); 
                  delay(3000); 
                  if(Firebase.RTDB.setInt(&firebaseDataRoot, "doorOpenReq",-1)){
                    Serial.println("Door 0 Open request and reset firebase data");                    
                  }
                  else{
                    Serial.println("door 0 OpenReq set failed because: " + firebaseDataRoot.errorReason());
                  }    
                  break;
                case 1:
                  //do something when var equals 2
                  rotateForward(1,pwm1);  
                  delay(3000); 
                  while(true){                    
                      if (!rfidReader2.PICC_IsNewCardPresent())
                      {
                        return;
                      }
                      /*Select Card*/
                      if (!rfidReader2.PICC_ReadCardSerial())
                      {
                        return;
                      }
                      
                      readEquipmentID(rfidReader2);
                      break;
                  }
                  //closing door
                  rotateBackward(1,pwm1);   
                  delay(3000);  
                  if(Firebase.RTDB.setInt(&firebaseDataRoot, "doorOpenReq",-1)){
                    Serial.println("Door 1 Open request and reset firebase data");                    
                  }
                  else{
                    Serial.println("door 1 OpenReq set failed because: " + firebaseDataRoot.errorReason());
                  }             
                  break;
                case 2:
                  //do something when var equals 2
                  rotateForward(2,pwm2);  
                  delay(3000); 
                  rotateBackward(2,pwm2); 
                  delay(3000);   
                  if(Firebase.RTDB.setInt(&firebaseDataRoot, "doorOpenReq",-1)){
                    Serial.println("Door 2 Open request and reset firebase data");                    
                  }
                  else{
                    Serial.println("door 2 OpenReq set failed because: " + firebaseDataRoot.errorReason());
                  }     
                  break;
                case 6:
                  //do something when var equals 2
                  rotateForward(3,pwm3);  
                  delay(3000); 
                  rotateBackward(3,pwm3); 
                  delay(3000); 
                  if(Firebase.RTDB.setInt(&firebaseDataRoot, "doorOpenReq",-1)){
                    Serial.println("Door 3 Open request and reset firebase data");                    
                  }
                  else{
                    Serial.println("door 3 OpenReq set failed because: " + firebaseDataRoot.errorReason());
                  } 
                  break;
                case 4:
                  //do something when var equals 2
                  rotateForward(4,pwm4);  
                  delay(50000);
                  rotateBackward(4,pwm4); 
                  delay(10000);  
                  if(Firebase.RTDB.setInt(&firebaseDataRoot, "doorOpenReq",-1)){
                    Serial.println("Door 4 Open request and reset firebase data");                    
                  }
                  else{
                    Serial.println("door 4 OpenReq set failed because: " + firebaseDataRoot.errorReason());
                  } 
                  break;    
                case 5:
                  //do something when var equals 2
                  rotateForward(5,pwm5);  
                  delay(50000);
                  rotateBackward(5,pwm5);  
                  delay(10000); 
                  if(Firebase.RTDB.setInt(&firebaseDataRoot, "doorOpenReq",-1)){
                    Serial.println("Door 5 Open request and reset firebase data");                    
                  }
                  else{
                    Serial.println("door 5 OpenReq set failed because: " + firebaseDataRoot.errorReason());
                  }       
                  break;      
                default:
                  // if nothing else matches, do the default
                  Serial.println("Door No matched any given doors");
                  if(Firebase.RTDB.setInt(&firebaseDataRoot, "doorOpenReq",-1)){
                    Serial.println("Door Open request and reset firebase data");                    
                  }else{
                    Serial.println("doorOpenReq set failed because: " + firebaseDataRoot.errorReason());
                  }
                  break;
              }              
            }else{
                  Serial.println("Default value observed while making attempt on opening door.");
            }

        }else{
            Serial.println("DoorOpenReq Failed");
            Serial.println("REASON: " + firebaseDataRoot.errorReason());
        }
        
      }else{
        Serial.println("scanProcessed & scanReq Failed");
        Serial.println("REASON: " + firebaseDataRoot.errorReason());
      }
    }
    else {
      Serial.println("Scan ID Write FAILED");
      Serial.println("REASON: " + firebaseDataRoot.errorReason());
    }
   return;
}

bool studentscanReqCheckFirebase(String scannedID){
    bool flag=false;
    if (Firebase.RTDB.getBool(&firebaseDataRoot, "/scanReq")) {
       
        Serial.println("ScanReq: ");
        Serial.println(firebaseDataRoot.to<String>());
        if(firebaseDataRoot.boolData()==true){
          
          // if(Firebase.RTDB.getBool(&firebaseDataRoot, "/scanProcessed")){
          //   Serial.println("Scan Processed: ");
          //   Serial.println(firebaseDataRoot.to<String>());
          //    if(firebaseDataRoot.boolData()==false){            
                  Serial.println("Sending: ");
                  return true;
          //    }
          // }      
            
        }else{
          Serial.println("Scan Req: ");
          Serial.println(firebaseDataRoot.stringData());
        }
      } 
}



void readEquipmentID(MFRC522 rfidReader){
  /*Show UID for Card/Tag on serial monitor*/
  Serial.print("UID tag :");
  String scannedEquipmentID= "";
  byte letter;
  for (byte i = 0; i < rfidReader.uid.size; i++)
  {
     Serial.print(rfidReader.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(rfidReader.uid.uidByte[i], HEX);
     scannedEquipmentID.concat(String(rfidReader.uid.uidByte[i] < 0x10 ? " 0" : " "));
     scannedEquipmentID.concat(String(rfidReader.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Equipment ID : ");
  scannedEquipmentID.toUpperCase();
  if (Firebase.ready() && signupOK ){
      bool checkFlag=scanReqCheckFirebase(scannedEquipmentID); 
      if(checkFlag==true){
        Serial.println("Sent to Firebase to write");
        // firebaseWrite(scannedID);
        if (Firebase.RTDB.setString(&firebaseDataRoot, "requestEqID/",scannedEquipmentID)){
            Serial.println("Scanned Equipment ID PASSED");
            Serial.println("PATH: " + firebaseDataRoot.dataPath());
            Serial.println("TYPE: " + firebaseDataRoot.dataType());
        }
      }
  }

}